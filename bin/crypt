#!/usr/bin/env python

import argparse
import base64
import binascii
import hashlib
import logging
import os
import sys

from backports.pbkdf2 import pbkdf2_hmac
from cryptography.fernet import Fernet


logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)


def init_fernet():

  print 'passphrase > ',
  password = raw_input()

  # XXX: parameterize 'salt'
  key = binascii.hexlify(
      pbkdf2_hmac('sha512', password, 'salt',
                  iterations=100000, dklen=16))
  safe = base64.b64encode(key)

  return Fernet(safe)


def encrypt(args):
  f = init_fernet()
  with open(args) as rfh:
    enc = f.encrypt(rfh.read())
    with open('%s.enc.txt' % args, 'w') as wfh:
      wfh.write(enc)


def decrypt(args):
  f = init_fernet()
  with open(args) as rfh:
    dec = f.decrypt(rfh.read())
    with open('%s' % args[:-len('.enc.txt')], 'w') as wfh:
      wfh.write(dec)


def main():
  parser = argparse.ArgumentParser(description='Simple encrypt/decrypt tool.')
  parser.add_argument('-e', action='store_true', help='Encrypt the file.')
  parser.add_argument('-d', action='store_true', help='Decrypt the file.')
  parser.add_argument('filename', help='The file to encrypt/decrypt.')
  args = parser.parse_args()

  filename = os.path.abspath(args.filename)
  if not os.path.exists(filename):
    log.error('File [%s] does not exist.', filename)
    sys.exit(1)

  if args.e:
    encrypt(filename)

  elif args.d:
    decrypt(filename)


if __name__ == "__main__":
  main()
